package snowflake

import (
	"fmt"
	"github.com/clakeboy/golib/utils"
	"sync"
	"testing"
	"time"
)

func TestNewShowFlake(t *testing.T) {
	fmt.Println(^(-1 << 41))

	fmt.Println(time.Now().UnixNano() / 1e6)

	fmt.Println()

	//90117296928067856 90117351416270848 90121840378515943
	//222408272404287488 222408382316023808
	//6443400298957639680
	//9223372036854775807
}

func TestSnowFlake_NextId(t *testing.T) {
	epoch := GetTimeMilliSecond()
	fmt.Println(epoch)
	fmt.Println(1288834974657)
	snow, err := NewShowFlake(1288834974657, 3, 6)
	if err != nil {
		panic(err)
	}
	for i := 0; i < 1e3; i++ {
		id, err := snow.NextId()
		if err != nil {
			fmt.Println("generate id error:", err)
			break
		}
		fmt.Println(id)
	}
}

func TestParseSnowFlake(t *testing.T) {
	ids := []int64{
		1202043172122537986,
		1202043172122537987,
		1202043172122537988,
		1202043172122537989,
		1202043172122537990,
		798720,
		798721,
		798722,
		798723,
		798724,
		798725,
		798726,
		798727,
		798728,
		798729,
		798730,
		798731,
		798732,
		798733,
		798734,
		798735,
		798736,
		798737,
		798738,
		798739,
		798740,
		798741,
		798742,
		798743,
		798744,
		798745,
		798746,
		798747,
		798748,
		798749,
		798750,
		798751,
		798752,
		798753,
		798754,
		798755,
		798756,
		798757,
		798758,
		798759,
		798760,
		798761,
		798762,
		798763,
		798764,
		798765,
		798766,
		798767,
		798768,
		798769,
		798770,
		798771,
		798772,
		798773,
		798774,
		798775,
		798776,
		798777,
		798778,
		798779,
		798780,
		798781,
		798782,
		798783,
		798784,
		798785,
		798786,
		798787,
		798788,
		798789,
		798790,
		798791,
		798792,
		798793,
		798794,
		798795,
		798796,
		798797,
		798798,
		798799,
		798800,
		798801,
		798802,
		798803,
		798804,
		798805,
		798806,
		798807,
		798808,
		798809,
		798810,
		798811,
		798812,
		798813,
		798814,
		798815,
		798816,
		798817,
		798818,
		798819,
		798820,
		798821,
		798822,
		798823,
		798824,
		798825,
		798826,
		798827,
		798828,
		798829,
		798830,
		798831,
		798832,
		798833,
		798834,
		798835,
		798836,
		798837,
		798838,
		798839,
		798840,
		798841,
		798842,
		798843,
		798844,
		798845,
		798846,
		798847,
		798848,
		798849,
		798850,
		798851,
		798852,
		798853,
		798854,
		798855,
		798856,
		798857,
		798858,
		798859,
		798860,
		798861,
		798862,
		798863,
		798864,
		798865,
		798866,
		798867,
		798868,
		798869,
		798870,
		798871,
		798872,
		798873,
		798874,
		798875,
		798876,
		798877,
		798878,
		798879,
		798880,
		798881,
		798882,
		798883,
		798884,
		798885,
		798886,
		798887,
		798888,
		798889,
		798890,
		798891,
		798892,
		798893,
		798894,
		798895,
		798896,
		798897,
		798898,
		798899,
		798900,
		798901,
		798902,
		798903,
		798904,
		798905,
		798906,
		798907,
		798908,
		798909,
		798910,
		798911,
		798912,
		798913,
		798914,
		798915,
		798916,
		798917,
		798918,
		798919,
		798920,
		798921,
		798922,
		798923,
		798924,
		798925,
		798926,
		798927,
		798928,
		798929,
		798930,
		798931,
		798932,
		798933,
		798934,
		798935,
		798936,
		798937,
		798938,
		798939,
		798940,
		798941,
		798942,
		798943,
		798944,
		798945,
		798946,
		798947,
		798948,
		798949,
		798950,
		798951,
		798952,
		798953,
		798954,
		798955,
		798956,
		798957,
		798958,
		798959,
		798960,
		798961,
		798962,
		798963,
		798964,
		798965,
		798966,
		798967,
		798968,
		798969,
		798970,
		798971,
		798972,
		798973,
		798974,
		798975,
		798976,
		798977,
		798978,
		798979,
		798980,
		798981,
		798982,
		798983,
		798984,
		798985,
		798986,
		798987,
		798988,
		798989,
		798990,
		798991,
		798992,
		798993,
		798994,
		798995,
		798996,
		798997,
		798998,
		798999,
		799000,
		799001,
		799002,
		799003,
		799004,
		799005,
		799006,
		799007,
		799008,
		799009,
		799010,
		799011,
		799012,
		799013,
		799014,
		799015,
		799016,
		799017,
		799018,
		799019,
		799020,
		799021,
		799022,
		799023,
		799024,
		799025,
		799026,
		799027,
		799028,
		799029,
		799030,
		799031,
		799032,
		799033,
		799034,
		799035,
		799036,
		799037,
		799038,
		799039,
		799040,
		799041,
		799042,
		799043,
		799044,
		799045,
		799046,
		799047,
		799048,
		799049,
		799050,
		799051,
		799052,
		799053,
		799054,
		799055,
		799056,
		799057,
		799058,
		799059,
		799060,
		799061,
		799062,
		799063,
		799064,
		799065,
		799066,
		799067,
		799068,
		799069,
		799070,
		799071,
		799072,
		799073,
		799074,
		799075,
		799076,
		799077,
		799078,
		799079,
		799080,
		799081,
		799082,
		799083,
		799084,
		799085,
		799086,
		799087,
		799088,
		799089,
		799090,
		799091,
		799092,
		799093,
		799094,
		799095,
		799096,
		799097,
		799098,
		799099,
		799100,
		799101,
		799102,
		799103,
		799104,
		799105,
		799106,
		799107,
		799108,
		799109,
		799110,
		799111,
		799112,
		799113,
		799114,
		799115,
		799116,
		799117,
		799118,
		799119,
		799120,
		799121,
		799122,
		799123,
		799124,
		799125,
		799126,
		799127,
		799128,
		799129,
		799130,
		799131,
		799132,
		799133,
		799134,
		799135,
		799136,
		799137,
		799138,
		799139,
		799140,
	}
	for _, sid := range ids {
		binStr := fmt.Sprintf("%b", sid)
		fmt.Println(binStr)
		fmt.Println(utils.BytesToInt(utils.BinaryStringToBytes(binStr)))
		binLen := int64(len(binStr))
		sequenceStart := utils.YN(binLen < workerIdShift, int64(0), binLen-workerIdShift).(int64)
		workerStart := utils.YN(binLen < dataCenterIdShift, int64(0), binLen-dataCenterIdShift).(int64)
		timeStart := utils.YN(binLen < timestampLeftShift, int64(0), binLen-timestampLeftShift).(int64)
		sequence := binStr[sequenceStart:]
		workerId := utils.YN(sequenceStart == 0, "0", binStr[workerStart:sequenceStart]).(string)
		dataCenterId := utils.YN(workerStart == 0, "0", binStr[timeStart:workerStart]).(string)
		timeBin := utils.YN(timeStart == 0, "0", binStr[:timeStart]).(string)
		timeBytes := utils.BinaryStringToBytes(timeBin)
		//if len(timeBytes) < 8 {
		//	fixHead := make([]byte,8-len(timeBytes))
		//	timeBytes = append(fixHead,timeBytes...)
		//}
		fmt.Println(timeBytes)
		fmt.Println("seq        :", utils.BytesToInt(utils.BinaryStringToBytes(sequence)), utils.BinaryStringToBytes(sequence), sequence)
		fmt.Println("worker     :", utils.BytesToInt(utils.BinaryStringToBytes(workerId)), utils.BinaryStringToBytes(workerId), workerId)
		fmt.Println("data center:", utils.BytesToInt(utils.BinaryStringToBytes(dataCenterId)), utils.BinaryStringToBytes(dataCenterId), dataCenterId)
		fmt.Println("time       :", utils.BytesToInt(utils.BinaryStringToBytes(timeBin))+1575377351124, utils.BinaryStringToBytes(timeBin), timeBin)
	}
}

func TestStructType(t *testing.T) {
	var b sync.Mutex
	var b1 *sync.Mutex
	fmt.Printf("%v\n", b)
	fmt.Printf("%v", b1)
}
